@model  Nop.X0_Widget.Widget.StatisticPriceEachMonth.Domain.StatisticPriceMonthly
@using Nop.Core.Infrastructure;
@using System;
@using Nop.Web.Framework;
@using Nop.Web.Framework.UI;
@using Nop.Core.Domain.Catalog;
@{
    Layout = "_AdminLayout.cshtml";
    }
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
    defaultGridPageSize = 20;
    gridPageSizes += ", 200, 300";
    //page title
    ViewBag.Title = T("Admin.Promotions.newsLetterSubscriptions").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("UpdateProduct");
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("StatisticPrice")
        </h1>
        <div class="pull-right">
            <button type="submit" name="UpdateProductSettingData" class="btn bg-green">
                <i class="fa fa-download"></i>
                @T("Update Data")
            </button>

         

            <button type="button" name="importcsv" class="btn bg-olive" data-toggle="modal" data-target="#importcsv-window">
                <i class="fa fa-upload"></i>
                @T("Admin.Common.ImportFromCsv")
            </button>

            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    @T("Admin.Common.Export")
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="exportcsv">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToCsv.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="export-selected">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToCsv.Selected")
                        </button>
                    </li>
                    <li class="divider"></li>
                   
                   
                </ul>
            </div>
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.Name)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.NopEditorFor(model => model.Name)
                                    </div>
                                </div>
                                <div class="form-group">
                                    @*<div id="cap" class="black-cap"></div>
                                    <input id="color" value="1" style="width: 100%;" />*@
                                    <div class="col-md-4">
                                        @Html.NopLabelFor(model => model.IsPublished)
                                    </div>
                                    <div class="col-md-8">
                                       @* <div id="cap" class="black-cap"></div>
                                    <input id="color" value="1" style="width: 100%;height:60px" />*@
                                        @Html.NopEditorFor(model => model.IsPublished)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-8 col-md-offset-4">
                                        <button type="button" id="search-subscriptions" class="btn btn-primary btn-search">
                                            <i class="fa fa-search"></i>
                                            @T("Admin.Common.Search")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="newsletter-subscriptions-grid"></div>

                        <script>
                            $(document).ready(function () {
                                $("#newsletter-subscriptions-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("GetStatisticPrice", "StatisticPrice"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: additionalData
                                            },
                                            update: {
                                                url: "@Html.Raw(Url.Action("UpdateStatisticPrice", "StatisticPrice"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            },
                                            destroy: {
                                                url: "@Html.Raw(Url.Action("DeleteStatisticPrice", "StatisticPrice"))",
                                                type: "POST",
                                                dataType: "json",
                                                data: addAntiForgeryToken
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors",
                                            model: {
                                                id: "Id",
                                                fields: {
                                                    ProductID: { editable: false, type: "string" },
                                                    Name: { editable: true, type: "string" },
                                                    IsPublished: { editable: true, type: "boolean" },
                                                    MSRP: { editable: true, type: "number" },
                                                    MonthlyAveragePrice: { editable: true, type: "number" },
                                                    MonthlyGotruecarPrice: { editable: true, type: "number" }
                                               
                                                }
                                            }
                                        },
                                        requestEnd: function (e) {
                                            if (e.type == "update") {
                                                this.read();
                                            }
                                        },
                                        error: function (e) {
                                            display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        pageSize: @(defaultGridPageSize),
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        numeruc: false,
                                        previousNext: false,
                                        info: false,
                                        pageSizes: [@(gridPageSizes)]
                                    },
                                    editable: {
                                        confirmation: true, @*"@T("Admin.Common.DeleteConfirmation")",*@
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    columns: [
                                         {
                                             field: "ProductID",                                
                                             headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                                             headerAttributes: { style: "text-align:center" },
                                             attributes: { style: "text-align:center" },
                                             template: "<input type='checkbox' value='#=ProductID#' class='checkboxGroups'/>",
                                             width: 50
                                         },
                                         {
                                             field: "Name",
                                             title: "@T("Name")",
                                             width: 300
                                         },
                                        {
                                            field: "IsPublished",
                                            title: "@T("IsPublished")",
                                            width: 300
                                        }, {
                                            field: "MSRP",
                                            title: "@T("MSRP")",
                                            width: 100,
                                            headerAttributes: { style: "text-align:center" },
                                            attributes: { style: "text-align:center" },
                                            //template: '# if(Active) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                                        }, {
                                            field: "MonthlyAveragePrice",
                                            title: "@T("Monthly Average Price")",
                                            width: 300
                                        }, {
                                            field: "MonthlyGotruecarPrice",
                                            title: "@T("Monthly Gotruecar Price")",
                                            width: 300
                                        },{
                                            command: [
                                                {
                                                    name: "edit",
                                                    text: {
                                                        edit: "@T("Admin.Common.Edit")",
                                                        update: "@T("Admin.Common.Update")",
                                                        cancel: "@T("Admin.Common.Cancel")"
                                                    }
                                                }, {
                                                    name: "destroy",
                                                    text: "@T("Admin.Common.Delete")"
                                                }
                                            ],
                                            width: 200
                                        }
                                    ]
                                });
                            });
                        </script>

                        <script type="text/javascript">
                            $(document).ready(function() {




           


                                $('#search-subscriptions').click(function() {
                                    var grid = $('#newsletter-subscriptions-grid').data('kendoGrid');
                                    grid.dataSource.page(1); //new search. Set page size to 1
                                    //grid.dataSource.read(); we already loaded the grid above using "page" function
                                    $('.checkboxGroups').attr('checked', false).change();
                                    selectedIds = [];
                                    return false;
                                });

                                $("#@Html.FieldIdFor(model => model.Name)").keydown(function(event) {
                                    if (event.keyCode == 13) {
                                        $("#search-subscriptions").click();
                                        return false;
                                    }
                                });
                              
                            });

                            function additionalData() {
                                var data = {
                                    Name: $('#@Html.FieldIdFor(model => model.Name)').val(),
                                    SearchCategoryId: $('#SearchCategoryId').val(),
                                    IsPublished: $('#@Html.FieldIdFor(model => model.IsPublished)').is(':checked')
                                };
                                addAntiForgeryToken(data);
                                return data;
                            }

                         
                        </script>


                        <script type="text/javascript">
                            var selectedIds = [];

                            $(document).ready(function() {
                                    

                                $('#mastercheckbox').click(function() {
                                    $('.checkboxGroups').prop('checked', $(this).is(':checked')).change();
                                });
                               

                                //wire up checkboxes.
                                $('#newsletter-subscriptions-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function(e) {
                                    var $check = $(this);
                                    if ($check.is(":checked") == true) {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked == -1) {
                                            //add id to selectedIds.
                                            selectedIds.push($check.val());
                                        }
                                    } else {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked > -1) {
                                            //remove id from selectedIds.
                                            selectedIds = $.grep(selectedIds, function(item, index) {
                                                return item != $check.val();
                                            });
                                        }
                                    }
                                    updateMasterCheckbox();
                                });
                            });

                            function onDataBound(e) {
                                $('#newsletter-subscriptions-grid input[type=checkbox][id!=mastercheckbox]').each(function() {
                                    var currentId = $(this).val();
                                    var checked = jQuery.inArray(currentId, selectedIds);
                                    //set checked based on if current checkbox's value is in selectedIds.
                                    $(this).attr('checked', checked > -1);
                                });

                                updateMasterCheckbox();
                            }

                            function updateMasterCheckbox() {
                                var numChkBoxes = $('#newsletter-subscriptions-grid input[type=checkbox][id!=mastercheckbox]').length;
                                var numChkBoxesChecked = $('#newsletter-subscriptions-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
                                $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                            }

                    
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<div id="importcsv-window" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="importcsv-window-title">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="importcsv-window-title">@T("Admin.Common.ImportFromCsv")</h4>
            </div>
            @using (Html.BeginForm("ImportCsv", "StatisticPrice", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">
                    <div class="modal-body">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <div class="col-md-2">
                                <div class="label-wrapper">
                                    <label class="control-label">
                                        @T("Admin.Common.CsvFile")
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-10">
                                <input type="file" id="importcsvfile" name="importcsvfile" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            @T("Admin.Common.ImportFromCsv")
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>







@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
@using (Html.BeginForm("ExportCsvSelected", "UpdateProduct", FormMethod.Post, new { id = "export-selected-form" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
}

<script type="text/javascript">
    $(document).ready(function () {
        $('#export-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-selected-form #selectedIds').val(ids);
            $('#export-selected-form').submit();
            return false;
        });
    });
</script>
